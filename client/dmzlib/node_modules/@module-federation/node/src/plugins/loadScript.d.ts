/**
 * loadScript(baseURI, fileName, cb)
 * loadScript(scriptUrl, cb)
 */
declare const _default: "\n  function loadScript(url, cb, chunkID) {\n    var url;\n    var cb = arguments[arguments.length - 1];\n    if (typeof cb !== \"function\") {\n      throw new Error(\"last argument should be a function\");\n    }\n    if (arguments.length === 2) {\n      url = arguments[0];\n    } else if (arguments.length === 3) {\n      url = new URL(arguments[1], arguments[0]).toString();\n    } else {\n      throw new Error(\"invalid number of arguments\");\n    }\n    if (globalThis.webpackChunkLoad) {\n      globalThis.webpackChunkLoad(url).then(function (resp) {\n        return resp.text();\n      }).then(function (rawData) {\n        cb(null, rawData);\n      }).catch(function (err) {\n        console.error('Federated Chunk load failed', err);\n        return cb(err)\n      });\n    } else if (typeof process !== 'undefined') {\n      //TODO https support\n      let request = (url.startsWith('https') ? require('https') : require('http')).get(url, function (resp) {\n        if (resp.statusCode === 200) {\n          let rawData = '';\n          resp.setEncoding('utf8');\n          resp.on('data', chunk => {\n            rawData += chunk;\n          });\n          resp.on('end', () => {\n            cb(null, rawData);\n          });\n        } else {\n          cb(resp);\n        }\n      });\n      request.on('error', error => {\n        console.error('Federated Chunk load failed', error);\n        return cb(error)\n      });\n    } else {\n      fetch(url).then(function (resp) {\n        return resp.text();\n      }).then(function (rawData) {\n        cb(null, rawData);\n      }).catch(function (err) {\n        console.error('Federated Chunk load failed', err);\n        return cb(err)\n      })\n    }\n  }\n";
export default _default;
export declare const executeLoadTemplate = "\n  function executeLoad(url, callback, name) {\n    if (!name) {\n      throw new Error('__webpack_require__.l name is required for ' + url);\n    }\n    if (typeof globalThis.__remote_scope__[name] !== 'undefined') return callback(globalThis.__remote_scope__[name]);\n    // if its a worker or node\n    if (typeof process !== 'undefined') {\n      const vm = require('vm');\n      (globalThis.webpackChunkLoad || globalThis.fetch || require(\"node-fetch\"))(url).then(function (res) {\n        return res.text();\n      }).then(function (scriptContent) {\n        try {\n         const m = require('module');\n\n         const remoteCapsule = vm.runInThisContext(m.wrap(scriptContent), 'node-federation-loader-' + name + '.vm')\n         const exp = {};\n         let remote = {exports:{}};\n         remoteCapsule(exp,require,remote,'node-federation-loader-' + name + '.vm',__dirname);\n         remote = remote.exports || remote;\n          globalThis.__remote_scope__[name] = remote[name] || remote;\n          globalThis.__remote_scope__._config[name] = url;\n          callback(globalThis.__remote_scope__[name])\n        } catch (e) {\n          console.error('executeLoad hit catch block', e);\n          e.target = {src: url};\n          callback(e);\n        }\n      }).catch((e) => {\n        e.target = {src: url};\n        callback(e);\n      });\n    } else {\n      fetch(url).then(function (res) {\n        return res.text();\n      }).then(function (scriptContent) {\n        try {\n          const remote = eval('let module = {};' + scriptContent + '\\nmodule.exports')\n          globalThis.__remote_scope__[name] = remote[name] || remote;\n          globalThis.__remote_scope__._config[name] = url;\n          callback(globalThis.__remote_scope__[name])\n        } catch (e) {\n          console.error('executeLoad hit catch block',e);\n          e.target = {src: url};\n          callback(e);\n        }\n      });\n    }\n  }\n";
