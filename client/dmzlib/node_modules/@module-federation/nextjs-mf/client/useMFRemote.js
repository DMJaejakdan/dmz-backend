"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMFRemote = void 0;
const React = __importStar(require("react"));
const RemoteContainer_1 = require("./RemoteContainer");
const isBrowser = typeof window !== 'undefined';
/**
 * React hook which provides an access to RemoteContainer in Module Federation
 *
 * @param global - can be a global variable name OR connection string "global@url"
 */
function useMFRemote(global) {
    let remote;
    if (isBrowser) {
        // on client (we get instances from global variable because webpack breaks Singletons)
        const MFClient = window.mf_client;
        remote = MFClient.remotes[global] || MFClient.registerRemote(global);
    }
    else {
        // on server side
        remote = RemoteContainer_1.RemoteContainer.createSingleton(global);
    }
    const [loaded, setLoaded] = React.useState(remote.isLoaded());
    const [error, setError] = React.useState(remote.error);
    React.useEffect(() => {
        const handleLoadComplete = () => {
            setLoaded(true);
        };
        const handleLoadError = (e) => {
            setError(e);
        };
        if (!loaded && remote.isLoaded()) {
            handleLoadComplete();
        }
        remote.events.on('loadComplete', handleLoadComplete);
        remote.events.on('loadError', handleLoadError);
        return () => {
            remote.events.off('loadComplete', handleLoadComplete);
            remote.events.off('loadError', handleLoadError);
        };
    }, [remote]);
    return {
        remote,
        loaded,
        error,
    };
}
exports.useMFRemote = useMFRemote;
//# sourceMappingURL=useMFRemote.js.map