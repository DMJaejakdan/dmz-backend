"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMFClient = void 0;
const React = __importStar(require("react"));
const router_1 = __importDefault(require("next/dist/client/router"));
const isBrowser = typeof window !== 'undefined';
/**
 * React hook which provides convenient way for working with ModuleFederation runtime changes in runtime;
 */
function useMFClient(opts) {
    const MFClient = isBrowser
        ? window.mf_client
        : /* TODO: inject here SSR version of MFClient if it will be needed in future */ {};
    const innerState = React.useRef({
        remote: undefined,
    });
    React.useEffect(() => {
        // Step 1: Define handlers and helpers
        const processRemoteChange = (remote) => {
            if (innerState.current.remote !== remote) {
                innerState.current.remote = remote;
                if (opts?.onChangeRemote) {
                    opts.onChangeRemote(remote, MFClient);
                }
            }
        };
        const handleRouterChange = (pathname) => {
            if (MFClient.isFederatedPathname(pathname)) {
                const remote = MFClient.remotePages.routeToRemote(pathname);
                processRemoteChange(remote);
            }
            else {
                processRemoteChange(undefined);
            }
        };
        // Step 2: run bootstrap logic
        const initialRemote = MFClient.isFederatedPathname(window.location.pathname)
            ? MFClient.remotePages.routeToRemote(window.location.pathname)
            : undefined;
        if (initialRemote) {
            // important for first load to fire `onChangeRemote` with different remote
            // because in innerState by default we assume that used local application
            processRemoteChange(initialRemote);
        }
        // Step 3: Subscribe on events
        router_1.default.events.on('routeChangeStart', handleRouterChange);
        return () => {
            router_1.default.events.off('routeChangeStart', handleRouterChange);
        };
    }, []);
    return MFClient;
}
exports.useMFClient = useMFClient;
//# sourceMappingURL=useMFClient.js.map