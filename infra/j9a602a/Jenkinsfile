pipeline {
    agent any

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Clone Repository'
                git branch: '<배포할 Branch>', url: '<Clone 받을 Git 주소>', credentialsId: '<Jenkins에 등록한 Credentials ID>'
            }
        }
        
        stage('Set Environment') {
            steps {
                echo 'Copy require file to pipeline folder'
				sh 'cp <Jenkins 내부에 위치한 환경변수 파일 위치> <복사할 위치>'
            }
        }
    
        stage('Docker down') {
            steps {
                echo 'Docker compose down'
                dir('<docker compose 파일이 위치한 곳>') {
                    sh 'sudo docker-compose down --rmi all'
                }
            }
        }
    
        stage('Docker Build') {
            steps {
                echo 'docker compose build'
                dir('<docker compose 파일이 위치한 곳>') {
				    sh 'sudo docker-compose build --no-cache'
                }
            }
			post {
				success {
					echo 'Success to build'
				}
				failure {
					echo 'Docker build failed. clear unused file'
					sh 'sudo docker system prune -f'
					error 'pipeline aborted'
				}
			}
        }
        
        stage('Docker up') {
            steps {
                echo 'Docker compose up'
                dir('<docker compose 파일이 위치한 곳>') {
                    sh 'sudo docker-compose up -d'
                }
            }
        }  
        
        stage('Docker clear') {
            steps {
                sh 'docker system prune -f'
            }
        }    
    }
    post {
        success {
        	script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good', 
                message: "배포 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: '<Mattermost Endpoint URL>', 
                channel: '<Mattermost Channel Name>'
                )
            }
        }
        failure {
        	script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger', 
                message: "배포 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)", 
                endpoint: '<Mattermost Endpoint URL>', 
                channel: '<Mattermost Channel Name>'
                )
            }
        }
    }
}